---
name: Ansible CI
on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - labeled
  pull_request_target:
  workflow_dispatch:

concurrency:
  group: ansible-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  ANSIBLE_FORCE_COLOR: true
  ANSIBLE_GALAXY_SERVER_GALAXY_URL: "https://galaxy.ansible.com"
  ANSIBLE_GALAXY_SERVER_GALAXY_TIMEOUT: 120
  ANSIBLE_GALAXY_SERVER_LIST: "galaxy"
  ANSIBLE_TEST_MOLECULE_VERSION: 0.1.3

jobs:
  ansible-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Lint collection
        uses: ansible/ansible-lint@9765b8704b2c3f4ab782815b528e0393662e1c04  # v25.7.0
        with:
          requirements_file: requirements.yml

  arguments-spec-lint:
    runs-on: ubuntu-latest
    container:
      image: quay.io/prometheus/golang-builder:base
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Lint arguments spec
        run: ./.github/scripts/lint_arguments_spec.sh

  check-unused-variables:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      - name: Run action
        uses: hoo29/little-timmy@c8ca5086db961499fc3d4e37637f566c3d0ec6d6  # v3-action

  discover-ansible-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.supported-ansible-versions.outputs.result }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Get Ansible versions that the collection supports
        id: supported-ansible-versions
        run: |
          echo "result=$(python ./.github/scripts/collection_version_parser.py)" >> $GITHUB_OUTPUT

  ansible-test-sanity:
    uses: ./.github/workflows/ansible-test-sanity.yml
    needs:
      - discover-ansible-versions
    with:
      ansible-core-versions: ${{ needs.discover-ansible-versions.outputs.versions }}

  ensure-ansible-test-molecule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Download ansible-test-molecule"
        run: |
          src="https://github.com/gardar/ansible-test-molecule/releases/download/${ANSIBLE_TEST_MOLECULE_VERSION}/ansible-test-molecule.sh"
          if [[ -v GITHUB_TOKEN ]]
          then
            curl -L -s -H "Authorization: token $GITHUB_TOKEN" $src -o ansible-test-molecule.sh
          else
            curl -L -s $src -o ansible-test-molecule.sh
          fi

      - name: "Setup molecule integration tests for roles"
        run: |
          for dir in $(find roles -type d -name 'molecule'); do
            role=$(basename $(dirname $dir))
            for test in $(ls $dir); do
              new_dir="tests/integration/targets/molecule-${role}-${test}"
              echo "Creating integration test: ${new_dir}"
              mkdir -p $new_dir

              cp ansible-test-molecule.sh ${new_dir}/runme.sh
              chmod +x ${new_dir}/runme.sh
            done
          done

      - name: "Commit molecule integration tests"
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: ansible-test molecule integration test"

  discover-ansible-tests:
    runs-on: ubuntu-latest
    needs:
      - ansible-lint
    outputs:
      integration-tests: ${{ steps.set-integration-tests.outputs.tests }}
      ansible-roles: ${{ steps.set-ansible-roles.outputs.roles }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0

      - name: Discover ansible roles
        id: set-ansible-roles
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        run: |
          roles=$(echo $LABELS | jq -c '[.[] | select(startswith("roles/")) | ltrimstr("roles/")]')
          echo $roles
          echo "roles=$roles" >> $GITHUB_OUTPUT

      - name: Discover integration tests
        id: set-integration-tests
        run: |
          echo tests="[`for test in $(find tests/integration/targets -maxdepth 1 -mindepth 1 -type d -not -iname "molecule-*" -printf "%f\n"); do
            echo '{"test":\"'"${test}"'\","name":\"'"${test}\"'"}';
          done | tr '\n' ',' | sed '$s/,$//'`]" >> $GITHUB_OUTPUT

  molecule:
    uses: ./.github/workflows/ansible-test-molecule.yml
    needs:
      - discover-ansible-tests
      - discover-ansible-versions
    if: needs.discover-ansible-tests.outputs.ansible-roles != '[]' &&
        needs.discover-ansible-tests.outputs.ansible-roles != ''
    with:
      role: ${{ matrix.role }}
      ansible-core-versions: ${{ needs.discover-ansible-versions.outputs.versions }}
    strategy:
      fail-fast: false
      matrix:
        role: ${{ fromJson(needs.discover-ansible-tests.outputs.ansible-roles) }}

  ansible-test-integration:
    uses: ./.github/workflows/ansible-test-integration.yml
    needs:
      - discover-ansible-tests
      - discover-ansible-versions
    if:
      needs.discover-ansible-tests.outputs.integration-tests != '[]' &&
      needs.discover-ansible-tests.outputs.integration-tests != ''
    with:
      targets: ${{ needs.discover-ansible-tests.outputs.integration-tests }}
      ansible-core-versions: ${{ needs.discover-ansible-versions.outputs.versions }}
