---
- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: Get systemd version
  ansible.builtin.command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Set systemd version fact
  ansible.builtin.set_fact:
    node_exporter_systemd_version: "{{ __systemd_version.stdout_lines[0] | regex_replace('^systemd\\s(\\d+).*$', '\\1') }}"

- name: Naive assertion of proper listen address
  ansible.builtin.assert:
    that:
      - "':' in node_exporter_web_listen_address"

- name: Assert collectors are not both disabled and enabled at the same time
  ansible.builtin.assert:
    that:
      - "item not in node_exporter_enabled_collectors"
  with_items: "{{ node_exporter_disabled_collectors }}"

- name: Assert that TLS config is correct
  when: node_exporter_tls_server_config | length > 0
  block:
    - name: Assert that TLS key and cert path are set
      ansible.builtin.assert:
        that:
          - "node_exporter_tls_server_config.cert_file is defined"
          - "node_exporter_tls_server_config.key_file is defined"

    - name: Check existence of TLS cert file
      ansible.builtin.stat:
        path: "{{ node_exporter_tls_server_config.cert_file }}"
      register: __node_exporter_cert_file
      become: true
      become_user: "{{ _node_exporter_system_user }}"

    - name: Check existence of TLS key file
      ansible.builtin.stat:
        path: "{{ node_exporter_tls_server_config.key_file }}"
      register: __node_exporter_key_file
      become: true
      become_user: "{{ _node_exporter_system_user }}"

    - name: Assert that TLS key and cert are present
      ansible.builtin.assert:
        that:
          - "{{ __node_exporter_cert_file.stat.exists }}"
          - "{{ __node_exporter_key_file.stat.exists }}"

    - name: Assert that node_exporter can read TLS key and cert
      ansible.builtin.assert:
        that:
          - "{{ __node_exporter_cert_file.stat.readable }}"
          - "{{ __node_exporter_key_file.stat.readable }}"
        msg: >-
          {{ _node_exporter_system_user }} system user does not have read
          permission on the TLS key and/or certificate.

- name: Check if node_exporter is installed
  ansible.builtin.stat:
    path: "{{ _node_exporter_binary_install_dir }}/node_exporter"
  register: __node_exporter_is_installed
  check_mode: false
  tags:
    - node_exporter_install

- name: Gather currently installed node_exporter version (if any)
  ansible.builtin.command: "{{ _node_exporter_binary_install_dir }}/node_exporter --version"
  changed_when: false
  register: __node_exporter_current_version_output
  check_mode: false
  when: __node_exporter_is_installed.stat.exists
  tags:
    - node_exporter_install
    - skip_ansible_lint

- name: Discover latest version
  ansible.builtin.set_fact:
    node_exporter_version: "{{ (lookup('url', 'https://api.github.com/repos/prometheus/node_exporter/releases/latest', split_lines=False) |
                            from_json).get('tag_name') | replace('v', '') }}"
  run_once: true
  until: node_exporter_version is version('0.0.0', '>=')
  retries: 10
  when:
    - node_exporter_version == "latest"
    - node_exporter_binary_local_dir | length == 0

- name: Get node_exporter binary checksum
  when: node_exporter_binary_local_dir | length == 0
  block:
    - name: Get checksum list from github
      ansible.builtin.set_fact:
        __node_exporter_checksums: "{{ lookup('url', node_exporter_checksums_url, wantlist=True) | list }}"
      run_once: true
      until: __node_exporter_checksums is search('linux-' + go_arch + '.tar.gz')
      retries: 10

    - name: "Get checksum for {{ go_arch }}"
      ansible.builtin.set_fact:
        __node_exporter_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ __node_exporter_checksums }}"
      when:
        - "('linux-' + go_arch + '.tar.gz') in item"
